<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Adrian&#39;s Blog</title>
		<link>https://adriankoshka.github.io/blog/posts/</link>
		<description>Recent content in Posts on Adrian&#39;s Blog</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.</copyright>
		<lastBuildDate>Sun, 03 Feb 2019 15:38:44 -0500</lastBuildDate>
		<atom:link href="https://adriankoshka.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Building My Blog on Windows</title>
			<link>https://adriankoshka.github.io/blog/posts/building-my-blog-on-windows/</link>
			<pubDate>Sun, 03 Feb 2019 15:38:44 -0500</pubDate>
			
			<guid>https://adriankoshka.github.io/blog/posts/building-my-blog-on-windows/</guid>
			<description>Part One: Creating a container On Linux, I build my blog via a container, I felt like doing the same on windows. This means I&amp;rsquo;d have to create a container image for building my blog. Until now, I hadn&amp;rsquo;t experimented with windows containers, I chose the nanoserver image as the base for my container. After doing some experimentation, I wrote this dockerfile:
FROMmicrosoft/nanoserverLABEL maintainer=&amp;#34;Adrian Lucrèce Céleste &amp;lt;adrianlucrececeleste@airmail.cc&amp;gt;&amp;#34;RUN powershell Invoke-WebRequest -Uri https://github.</description>
			<content type="html"><![CDATA[

<h2 id="part-one-creating-a-container">Part One: Creating a container</h2>

<p>On Linux, I build my blog via a <a href="https://quay.io/repository/adrianlucrececeleste/alpine-hugo">container</a>,
I felt like doing the same on windows. This means I&rsquo;d have to create a container
image for building my blog. Until now, I hadn&rsquo;t experimented with windows
containers, I chose the <a href="https://hub.docker.com/r/microsoft/nanoserver">nanoserver</a>
image as the base for my container. After doing some experimentation, I wrote
<a href="https://github.com/AdrianKoshka/windows-hugo/blob/master/Dockerfile">this</a> dockerfile:</p>
<div class="highlight"><pre class="chroma"><code class="language-Dockerfile" data-lang="Dockerfile"><span class="k">FROM</span><span class="s"> microsoft/nanoserver</span><span class="err">
</span><span class="err"></span>LABEL <span class="nv">maintainer</span><span class="o">=</span><span class="s2">&#34;Adrian Lucrèce Céleste &lt;adrianlucrececeleste@airmail.cc&gt;&#34;</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">RUN</span> powershell Invoke-WebRequest -Uri https://github.com/gohugoio/hugo/releases/download/v0.54.0/hugo_0.54.0_Windows-64bit.zip -Outfile hugo.zip<span class="err">
</span><span class="err"></span><span class="k">RUN</span> powershell Expand-Archive C:<span class="se">\\</span>hugo.zip -DestinationPath C:<span class="se">\\</span>hugo<span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">WORKDIR</span><span class="s"> C:\\workspace</span><span class="err">
</span><span class="err"></span><span class="k">CMD</span><span class="s"> [ &#34;--help&#34; ]</span><span class="err">
</span><span class="err"></span><span class="k">ENTRYPOINT</span><span class="s"> [ &#34;C:\\hugo\\hugo.exe&#34; ]</span></code></pre></div>
<p>For those unfamiliar with docker, this file can be easily broken down
line-by-line.</p>

<p><code>FROM microsoft/nanoserver</code></p>

<p>This line tells docker what image we want to base our container off of, in this
case, I&rsquo;m using microsoft&rsquo;s nanoserver image.</p>

<p><code>LABEL maintainer=&quot;Adrian Lucrèce Céleste &lt;adrianlucrececeleste@airmail.cc&gt;&quot;</code></p>

<p>This line tells docker who the maintainer of this image is, by applying a label.</p>

<p><code>RUN powershell Invoke-WebRequest -Uri https://verlonglink.com -Outfile hugo.zip</code></p>

<p>The <code>RUN</code> statement tells docker to run powershell with the specified parameters
inside the container, <code>Invoke-WebRequest</code> is how I download the <code>.zip</code> that hugo
comes packaged in for windows.</p>

<p><code>RUN powershell Expand-Archive C:\\hugo.zip -DestinationPath C:\\hugo</code></p>

<p>Here, powershell is unzipping the archive to <code>C:\hugo</code> for us.</p>

<p><code>WORKDIR C:\\workspace</code></p>

<p><code>WORKDIR</code> tells the container what directory to start out in at runtime.</p>

<p><code>CMD [ &quot;--help&quot; ]</code></p>

<p><code>CMD</code> provides a default argument for the container while running, the container
passes <code>--help</code> to our <code>ENTRYPOINT</code> of <code>C:\hugo\hugo.exe</code>.</p>

<p><code>ENTRYPOINT [ &quot;C:\\hugo\\hugo.exe&quot; ]</code></p>

<p>The last and final line, <code>ENTRYPOINT</code> which tells the container what executable
(and optionally, parameters) we want to use during runtime.</p>

<h2 id="preface">Preface</h2>

<p>Part two is outdated, I now just use <code>wsl</code> to run <code>hugo</code> from instead of using
a windows docker container.</p>

<h3 id="part-two-setting-up-vscode-to-use-the-container-on-windows">Part Two: Setting up VScode to use the container on windows</h3>

<p>Before in my <a href="https://github.com/AdrianKoshka/blog/blob/master/.vscode/tasks.json"><code>tasks.json</code></a>,
I only had one <code>command</code> and one <code>args</code> section per task, now I seperate them
based on the OS that VScode is running on. So now if I wanted to preview my blog
on windows, all I have to do is run the <code>Preview</code> task, and the container will
be spun up, the ports mapped, and I can just open a web browser and look at my
progress. Building is also as easy as just running the build task.</p>

<p><img src="/blog/imgs/preview-windows-container.jpg" alt="previewing the site" /></p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&#34;version&#34;</span><span class="p">:</span> <span class="s2">&#34;2.0.0&#34;</span><span class="p">,</span>
    <span class="nt">&#34;tasks&#34;</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span>
            <span class="nt">&#34;label&#34;</span><span class="p">:</span> <span class="s2">&#34;Preview&#34;</span><span class="p">,</span>
            <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;process&#34;</span><span class="p">,</span>
            <span class="nt">&#34;linux&#34;</span><span class="p">:</span> <span class="p">{</span>
                <span class="nt">&#34;command&#34;</span><span class="p">:</span> <span class="s2">&#34;podman&#34;</span><span class="p">,</span>
                <span class="nt">&#34;args&#34;</span><span class="p">:</span> <span class="p">[</span>
                    <span class="s2">&#34;run&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;--rm&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;--net=host&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;--name=hp&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;-v&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;${workspaceFolder}:/workspace:z&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;quay.io/adrianlucrececeleste/alpine-hugo:latest&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;serve&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;--theme=kiss&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;--source=/workspace/src&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;--buildDrafts&#34;</span>
                <span class="p">]</span>
            <span class="p">},</span>
            <span class="nt">&#34;windows&#34;</span><span class="p">:</span> <span class="p">{</span>
                <span class="nt">&#34;command&#34;</span><span class="p">:</span> <span class="s2">&#34;docker&#34;</span><span class="p">,</span>
                <span class="nt">&#34;args&#34;</span><span class="p">:</span> <span class="p">[</span>
                    <span class="s2">&#34;run&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;--rm&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;-it&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;--isolation=hyperv&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;--name=hp&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;-p&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;1313:1313&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;-v&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;${workspaceFolder}:C:\\workspace&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;adrianlucrececeleste/windows-hugo:latest&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;serve&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;--theme=kiss&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;--bind&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;0.0.0.0&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;--source=src&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;--buildDrafts&#34;</span>
                <span class="p">]</span>
            <span class="p">},</span>
            <span class="nt">&#34;problemMatcher&#34;</span><span class="p">:</span> <span class="p">[]</span>
        <span class="p">},</span>
        <span class="p">{</span>
            <span class="nt">&#34;label&#34;</span><span class="p">:</span> <span class="s2">&#34;Build Blog&#34;</span><span class="p">,</span>
            <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;process&#34;</span><span class="p">,</span>
            <span class="nt">&#34;linux&#34;</span><span class="p">:</span> <span class="p">{</span><span class="nt">&#34;command&#34;</span><span class="p">:</span> <span class="s2">&#34;podman&#34;</span><span class="p">,</span>
                <span class="nt">&#34;args&#34;</span><span class="p">:</span> <span class="p">[</span>
                    <span class="s2">&#34;run&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;--rm&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;--net=host&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;--name=hb-$(git rev-parse HEAD)&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;-v&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;${workspaceFolder}:/workspace:z&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;quay.io/adrianlucrececeleste/alpine-hugo:latest&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;--cleanDestinationDir&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;--source=/workspace/src&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;--destination=/workspace/docs&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;--theme=kiss&#34;</span><span class="p">,</span>
                <span class="p">]</span>
            <span class="p">},</span>
            <span class="nt">&#34;windows&#34;</span><span class="p">:</span> <span class="p">{</span>
                <span class="nt">&#34;command&#34;</span><span class="p">:</span> <span class="s2">&#34;docker&#34;</span><span class="p">,</span>
                <span class="nt">&#34;args&#34;</span><span class="p">:</span> <span class="p">[</span>
                    <span class="s2">&#34;run&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;--rm&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;--isolation=hyperv&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;-it&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;--name=hb&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;-p&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;1313:1313&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;-v&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;${workspaceFolder}:C:\\workspace&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;adrianlucrececeleste/windows-hugo:latest&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;--cleanDestinationDir&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;--source=C:\\workspace\\src&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;--destination=C:\\workspace\\docs&#34;</span><span class="p">,</span>
                    <span class="s2">&#34;--theme=kiss&#34;</span>
                <span class="p">]</span>
            <span class="p">},</span>
            <span class="nt">&#34;problemMatcher&#34;</span><span class="p">:</span> <span class="p">[],</span>
            <span class="nt">&#34;group&#34;</span><span class="p">:</span> <span class="p">{</span>
                <span class="nt">&#34;kind&#34;</span><span class="p">:</span> <span class="s2">&#34;build&#34;</span><span class="p">,</span>
                <span class="nt">&#34;isDefault&#34;</span><span class="p">:</span> <span class="kc">true</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">]</span>
<span class="p">}</span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Using Travis to push container images to Quay.io</title>
			<link>https://adriankoshka.github.io/blog/posts/travis-and-quay/</link>
			<pubDate>Thu, 24 Jan 2019 20:02:00 +0000</pubDate>
			
			<guid>https://adriankoshka.github.io/blog/posts/travis-and-quay/</guid>
			<description>Preface This blog post assumes:
 The user is familiar with:  Travis-ci Docker (or podman/buildah) Git Github  The user has an account with:  Travis-ci Github Quay   For those unfamiliar with the above, here are some resources
Introduction I prefer using Quay.io as my container registry instead of Dockerhub, and as such, I had to learn how setup Travis to push to quay.io. This is something I hadn&amp;rsquo;t done before, as I&amp;rsquo;ve only recently started making my own container images.</description>
			<content type="html"><![CDATA[

<h2 id="preface">Preface</h2>

<p>This blog post assumes:</p>

<ul>
<li>The user is familiar with:

<ul>
<li><a href="https://travis-ci.org">Travis-ci</a></li>
<li><a href="https://www.docker.com/">Docker</a> (or <a href="https://podman.io">podman</a>/<a href="https://buildah.io">buildah</a>)</li>
<li><a href="https://git-scm.com/">Git</a></li>
<li><a href="https://github.com">Github</a></li>
</ul></li>
<li>The user has an account with:

<ul>
<li><a href="https://travis-ci.org">Travis-ci</a></li>
<li><a href="https://github.com">Github</a></li>
<li><a href="https://quay.io">Quay</a></li>
</ul></li>
</ul>

<p>For those unfamiliar with the above, here are some <a href="#resources">resources</a></p>

<h1 id="introduction">Introduction</h1>

<p>I prefer using <a href="https://quay.io">Quay.io</a> as my container registry instead of
<a href="https://hub.docker.com">Dockerhub</a>, and as such, I had to learn how setup
<a href="https://travis-ci.org">Travis</a> to push to <a href="https://quay.io">quay.io</a>. This is
something I hadn&rsquo;t done before, as I&rsquo;ve only recently started making my own
container images.</p>

<h3 id="step-one-fork-the-tutorial-repo">Step One: fork the tutorial repo</h3>

<p>I&rsquo;ve setup a repo on github that I&rsquo;ll be using as a guide for this tutorial, it
can be found <a href="https://github.com/AdrianKoshka/travis-quay-tutorial">here</a>. All
you need to do is press the <code>Fork</code> button:</p>

<p><img src="/blog/imgs/fork-button.png" alt="fork button" /></p>

<p>This will make a copy of my repo for you to use with your account. The next step
is to clone this repo:</p>

<p><code>git clone git@github.com:AdrianKoshka/travis-quay-tutorial.git</code></p>

<p>You can find the URL to clone from when you press the <code>Clone or download</code> button.</p>

<p><img src="/blog/imgs/clone-button-quay-travis-tut.png" alt="clone or download button" /></p>

<h3 id="step-two-initial-repo-setup">Step Two: Initial repo setup</h3>

<p>You&rsquo;ll need to edit the <code>.travis.yml</code> and <code>docker_push</code> files in your repo,
replacing <code>[yourusername]</code> with the username of your quay account.</p>

<script src="https://gist.github.com/AdrianKoshka/52691ea092f24997488b0bcdefd6d0b5.js"></script>

<script src="https://gist.github.com/AdrianKoshka/ee32d9157fd941f98c4eb60afac919ff.js"></script>

<h3 id="step-three-creating-the-quay-repository">Step Three: Creating the quay repository</h3>

<p>When signed into quay, in the upper right-hand corner, you&rsquo;ll see a
<code>+ Create New Repository</code> button. Click the button,</p>

<p><img src="/blog/imgs/quay-plus-button.png" alt="quay plus button" /></p>

<p>You&rsquo;ll want to select <code>Public</code> instead of <code>Private</code>, and enter the repository name.
Then click <code>Create Public Repository</code>. You&rsquo;ve now created the empty repository
we&rsquo;ll be pushing our container image to later.</p>

<p><img src="/blog/imgs/quay-new-repo.png" alt="quay new repo" /></p>

<h3 id="step-four-creating-the-robot-account">Step Four: Creating the &ldquo;Robot Account&rdquo;</h3>

<p>Robot accounts are &ldquo;accounts&rdquo; in quay.io under your user used for automated tasks.</p>

<p>Again, in the upper right-hand corner, you&rsquo;ll see the <code>+</code> button, click it, then
click <code>New Robot Account</code>.</p>

<p><img src="/blog/imgs/new-robot-account.png" alt="New Robot Account" /></p>

<p>You&rsquo;ll need to enter a name and description for the bot:</p>

<p><img src="/blog/imgs/create-robot-step-one.png" alt="Create Robot Account Step 1" /></p>

<p>Press <code>Create Robot Account</code>, now you&rsquo;ll have to give the robot write
permissions to the repo you just created:</p>

<p><img src="/blog/imgs/robot-give-privs.png" alt="Give Robot privileges" /></p>

<p>Then press <code>Add Permissions</code>. You&rsquo;ll be taken to your robot account settings
page now.</p>

<p><img src="/blog/imgs/robot-account-settings.png" alt="Robot Settings Page" /></p>

<p>Click the username of your newly created bot, it should bring up a window
with your bots username and password.</p>

<p><img src="/blog/imgs/bot-creds.png" alt="Bot username and password" /></p>

<p>We&rsquo;ll need these creds later.</p>

<h3 id="step-five-adding-variables-to-your-repo-on-travis">Step Five: Adding variables to your repo on travis</h3>

<p>On Travis, go to your settings and click the <code>sync account</code> button. In the list
of repositories should be your <code>travis-quay-tutorial</code> repo you forked earlier,
activate it, and click on the <code>settings</code> button.</p>

<p><img src="/blog/imgs/travis-settings.png" alt="Travis Settings" /></p>

<p>Scroll down to the section named <code>Environment Variables</code>, and add a variable
name <code>QUAY_BOT_USERNAME</code>, put the username of your robot account that you saw
in the previous section, you should be able to copy-paste it.</p>

<p><img src="/blog/imgs/travis-env-var-username.png" alt="Add QUAY_BOT_USERNAME" /></p>

<p>Press the <code>Add</code> button. Add another variable called <code>QUAY_BOT_PASSWORD</code> and
enter your bots password.</p>

<p>Your <code>Environment Variables</code> section should look like this now:</p>

<p><img src="/blog/imgs/travis-env-var-after.png" alt="Travis Environmental Variables After" /></p>

<h3 id="step-six-committing-the-changes-from-step-two">Step Six: Committing the changes from step two</h3>

<p>Now that you&rsquo;ve set everything else up, you can commit your changes to
<code>.travis.yml</code> and <code>docker_push</code>, then push your changes to your fork. This
should trigger a build with travis, which will build the container, and then
push it to the quay repository.</p>

<h2 id="resources">Resources</h2>

<ul>
<li><a href="https://docs.travis-ci.com/user/for-beginners">Travis Core Concepts for Beginners</a></li>
<li><a href="https://www.docker.com/resources/what-container">Docker: What is a Container</a></li>
<li><a href="https://www.docker.com/get-started">Docker: Get Started with Docker</a></li>
<li><a href="https://github.com/containers/libpod/blob/master/docs/tutorials/podman_tutorial.md">Podman: Basic Setup and Use of Podman</a></li>
<li><a href="https://github.com/containers/buildah/tree/master/docs/tutorials">Buildah: Tutorials</a></li>
<li><a href="https://guides.github.com/">Github Guides</a></li>
</ul>
]]></content>
		</item>
		
	</channel>
</rss>
