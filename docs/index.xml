<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Adrian&#39;s Blog</title>
    <link>https://adriankoshka.github.io/blog/</link>
    <description>Recent content on Adrian&#39;s Blog</description>
    <generator>Hugo - gohugo.io</generator>
    <language>en</language>
    <contact>adrianlucrececeleste@airmail.cc</contact>
    <copyright>Adrian Lucrèce Céleste 2019</copyright>
    
        <atom:link href="https://adriankoshka.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Building My Blog on Windows</title>
      <link>https://adriankoshka.github.io/blog/post/building-my-blog-on-windows/</link>
      <pubDate>Sun, 03 Feb 2019 15:38:44 -0500</pubDate>
      <author>Adrian Lucrèce Céleste</author>
      <guid>https://adriankoshka.github.io/blog/post/building-my-blog-on-windows/</guid>
      <description></description>
      
      <content>

&lt;h2 id=&#34;part-one-creating-a-container&#34;&gt;Part One: Creating a container&lt;/h2&gt;

&lt;p&gt;On Linux, I build my blog via a &lt;a href=&#34;https://quay.io/repository/adrianlucrececeleste/alpine-hugo&#34;&gt;container&lt;/a&gt;,
I felt like doing the same on windows. This means I&amp;rsquo;d have to create a container
image for building my blog. Until now, I hadn&amp;rsquo;t experimented with windows
containers, I chose the &lt;a href=&#34;https://hub.docker.com/r/microsoft/nanoserver&#34;&gt;nanoserver&lt;/a&gt;
image as the base for my container. After doing some experimentation, I wrote
&lt;a href=&#34;https://github.com/AdrianKoshka/windows-hugo/blob/master/Dockerfile&#34;&gt;this&lt;/a&gt; dockerfile:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/AdrianKoshka/cc965394f29893bcb1638a9253c5212f.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;For those unfamiliar with docker, this file can be easily broken down
line-by-line.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;FROM microsoft/nanoserver&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This line tells docker what image we want to base our container off of, in this
case, I&amp;rsquo;m using microsoft&amp;rsquo;s nanoserver image.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;LABEL maintainer=&amp;quot;Adrian Lucrèce Céleste &amp;lt;adrianlucrececeleste@airmail.cc&amp;gt;&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This line tells docker who the maintainer of this image is, by applying a label.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;RUN powershell Invoke-WebRequest -Uri https://verlonglink.com -Outfile hugo.zip&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;RUN&lt;/code&gt; statement tells docker to run powershell with the specified parameters
inside the container, &lt;code&gt;Invoke-WebRequest&lt;/code&gt; is how I download the &lt;code&gt;.zip&lt;/code&gt; that hugo
comes packaged in for windows.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;RUN powershell Expand-Archive C:\\hugo.zip -DestinationPath C:\\hugo&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here, powershell is unzipping the archive to &lt;code&gt;C:\hugo&lt;/code&gt; for us.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;WORKDIR C:\\workspace&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;WORKDIR&lt;/code&gt; tells the container what directory to start out in at runtime.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;CMD [ &amp;quot;--help&amp;quot; ]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;CMD&lt;/code&gt; provides a default argument for the container while running, the container
passes &lt;code&gt;--help&lt;/code&gt; to our &lt;code&gt;ENTRYPOINT&lt;/code&gt; of &lt;code&gt;C:\hugo\hugo.exe&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ENTRYPOINT [ &amp;quot;C:\\hugo\\hugo.exe&amp;quot; ]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The last and final line, &lt;code&gt;ENTRYPOINT&lt;/code&gt; which tells the container what executable
(and optionally, parameters) we want to use during runtime.&lt;/p&gt;

&lt;h2 id=&#34;part-two-setting-up-vscode-to-use-the-container-on-windows&#34;&gt;Part Two: Setting up VScode to use the container on windows&lt;/h2&gt;

&lt;p&gt;Before in my &lt;a href=&#34;https://github.com/AdrianKoshka/blog/blob/master/.vscode/tasks.json&#34;&gt;&lt;code&gt;tasks.json&lt;/code&gt;&lt;/a&gt;,
I only had one &lt;code&gt;command&lt;/code&gt; and one &lt;code&gt;args&lt;/code&gt; section per task, now I seperate them
based on the OS that VScode is running on. So now if I wanted to preview my blog
on windows, all I have to do is run the &lt;code&gt;Preview&lt;/code&gt; task, and the container will
be spun up, the ports mapped, and I can just open a web browser and look at my
progress. Building is also as easy as just running the build task.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://adriankoshka.github.io/blog/blog/imgs/preview-windows-container.jpg&#34; alt=&#34;previewing the site&#34; /&gt;&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/AdrianKoshka/006de98e4dd75eeb405b7715fcf4c07b.js&#34;&gt;&lt;/script&gt;
</content>
      
    </item>
    
    <item>
      <title>Using Travis to push container images to Quay.io</title>
      <link>https://adriankoshka.github.io/blog/post/travis-and-quay/</link>
      <pubDate>Thu, 24 Jan 2019 20:02:00 +0000</pubDate>
      <author>Adrian Lucrèce Céleste</author>
      <guid>https://adriankoshka.github.io/blog/post/travis-and-quay/</guid>
      <description></description>
      
      <content>

&lt;h2 id=&#34;preface&#34;&gt;Preface&lt;/h2&gt;

&lt;p&gt;This blog post assumes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The user is familiar with:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://travis-ci.org&#34;&gt;Travis-ci&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; (or &lt;a href=&#34;https://podman.io&#34;&gt;podman&lt;/a&gt;/&lt;a href=&#34;https://buildah.io&#34;&gt;buildah&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com&#34;&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The user has an account with:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://travis-ci.org&#34;&gt;Travis-ci&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com&#34;&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://quay.io&#34;&gt;Quay&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For those unfamiliar with the above, here are some &lt;a href=&#34;#resources&#34;&gt;resources&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;I prefer using &lt;a href=&#34;https://quay.io&#34;&gt;Quay.io&lt;/a&gt; as my container registry instead of
&lt;a href=&#34;https://hub.docker.com&#34;&gt;Dockerhub&lt;/a&gt;, and as such, I had to learn how setup
&lt;a href=&#34;https://travis-ci.org&#34;&gt;Travis&lt;/a&gt; to push to &lt;a href=&#34;https://quay.io&#34;&gt;quay.io&lt;/a&gt;. This is
something I hadn&amp;rsquo;t done before, as I&amp;rsquo;ve only recently started making my own
container images.&lt;/p&gt;

&lt;h3 id=&#34;step-one-fork-the-tutorial-repo&#34;&gt;Step One: fork the tutorial repo&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve setup a repo on github that I&amp;rsquo;ll be using as a guide for this tutorial, it
can be found &lt;a href=&#34;https://github.com/AdrianKoshka/travis-quay-tutorial&#34;&gt;here&lt;/a&gt;. All
you need to do is press the &lt;code&gt;Fork&lt;/code&gt; button:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://adriankoshka.github.io/blog/blog/imgs/fork-button.png&#34; alt=&#34;fork button&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This will make a copy of my repo for you to use with your account. The next step
is to clone this repo:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git clone git@github.com:AdrianKoshka/travis-quay-tutorial.git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can find the URL to clone from when you press the &lt;code&gt;Clone or download&lt;/code&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://adriankoshka.github.io/blog/blog/imgs/clone-button-quay-travis-tut.png&#34; alt=&#34;clone or download button&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;step-two-initial-repo-setup&#34;&gt;Step Two: Initial repo setup&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll need to edit the &lt;code&gt;.travis.yml&lt;/code&gt; and &lt;code&gt;docker_push&lt;/code&gt; files in your repo,
replacing &lt;code&gt;[yourusername]&lt;/code&gt; with the username of your quay account.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/AdrianKoshka/52691ea092f24997488b0bcdefd6d0b5.js&#34;&gt;&lt;/script&gt;

&lt;script src=&#34;https://gist.github.com/AdrianKoshka/ee32d9157fd941f98c4eb60afac919ff.js&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;step-three-creating-the-quay-repository&#34;&gt;Step Three: Creating the quay repository&lt;/h3&gt;

&lt;p&gt;When signed into quay, in the upper right-hand corner, you&amp;rsquo;ll see a
&lt;code&gt;+ Create New Repository&lt;/code&gt; button. Click the button,&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://adriankoshka.github.io/blog/blog/imgs/quay-plus-button.png&#34; alt=&#34;quay plus button&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll want to select &lt;code&gt;Public&lt;/code&gt; instead of &lt;code&gt;Private&lt;/code&gt;, and enter the repository name.
Then click &lt;code&gt;Create Public Repository&lt;/code&gt;. You&amp;rsquo;ve now created the empty repository
we&amp;rsquo;ll be pushing our container image to later.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://adriankoshka.github.io/blog/blog/imgs/quay-new-repo.png&#34; alt=&#34;quay new repo&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;step-four-creating-the-robot-account&#34;&gt;Step Four: Creating the &amp;ldquo;Robot Account&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;Robot accounts are &amp;ldquo;accounts&amp;rdquo; in quay.io under your user used for automated tasks.&lt;/p&gt;

&lt;p&gt;Again, in the upper right-hand corner, you&amp;rsquo;ll see the &lt;code&gt;+&lt;/code&gt; button, click it, then
click &lt;code&gt;New Robot Account&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://adriankoshka.github.io/blog/blog/imgs/new-robot-account.png&#34; alt=&#34;New Robot Account&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll need to enter a name and description for the bot:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://adriankoshka.github.io/blog/blog/imgs/create-robot-step-one.png&#34; alt=&#34;Create Robot Account Step 1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Press &lt;code&gt;Create Robot Account&lt;/code&gt;, now you&amp;rsquo;ll have to give the robot write
permissions to the repo you just created:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://adriankoshka.github.io/blog/blog/imgs/robot-give-privs.png&#34; alt=&#34;Give Robot privileges&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then press &lt;code&gt;Add Permissions&lt;/code&gt;. You&amp;rsquo;ll be taken to your robot account settings
page now.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://adriankoshka.github.io/blog/blog/imgs/robot-account-settings.png&#34; alt=&#34;Robot Settings Page&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Click the username of your newly created bot, it should bring up a window
with your bots username and password.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://adriankoshka.github.io/blog/blog/imgs/bot-creds.png&#34; alt=&#34;Bot username and password&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll need these creds later.&lt;/p&gt;

&lt;h3 id=&#34;step-five-adding-variables-to-your-repo-on-travis&#34;&gt;Step Five: Adding variables to your repo on travis&lt;/h3&gt;

&lt;p&gt;On Travis, go to your settings and click the &lt;code&gt;sync account&lt;/code&gt; button. In the list
of repositories should be your &lt;code&gt;travis-quay-tutorial&lt;/code&gt; repo you forked earlier,
activate it, and click on the &lt;code&gt;settings&lt;/code&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://adriankoshka.github.io/blog/blog/imgs/travis-settings.png&#34; alt=&#34;Travis Settings&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Scroll down to the section named &lt;code&gt;Environment Variables&lt;/code&gt;, and add a variable
name &lt;code&gt;QUAY_BOT_USERNAME&lt;/code&gt;, put the username of your robot account that you saw
in the previous section, you should be able to copy-paste it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://adriankoshka.github.io/blog/blog/imgs/travis-env-var-username.png&#34; alt=&#34;Add QUAY_BOT_USERNAME&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Press the &lt;code&gt;Add&lt;/code&gt; button. Add another variable called &lt;code&gt;QUAY_BOT_PASSWORD&lt;/code&gt; and
enter your bots password.&lt;/p&gt;

&lt;p&gt;Your &lt;code&gt;Environment Variables&lt;/code&gt; section should look like this now:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://adriankoshka.github.io/blog/blog/imgs/travis-env-var-after.png&#34; alt=&#34;Travis Environmental Variables After&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;step-six-committing-the-changes-from-step-two&#34;&gt;Step Six: Committing the changes from step two&lt;/h3&gt;

&lt;p&gt;Now that you&amp;rsquo;ve set everything else up, you can commit your changes to
&lt;code&gt;.travis.yml&lt;/code&gt; and &lt;code&gt;docker_push&lt;/code&gt;, then push your changes to your fork. This
should trigger a build with travis, which will build the container, and then
push it to the quay repository.&lt;/p&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.travis-ci.com/user/for-beginners&#34;&gt;Travis Core Concepts for Beginners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.docker.com/resources/what-container&#34;&gt;Docker: What is a Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.docker.com/get-started&#34;&gt;Docker: Get Started with Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/containers/libpod/blob/master/docs/tutorials/podman_tutorial.md&#34;&gt;Podman: Basic Setup and Use of Podman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/containers/buildah/tree/master/docs/tutorials&#34;&gt;Buildah: Tutorials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://guides.github.com/&#34;&gt;Github Guides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
      
    </item>
    
  </channel>
</rss>